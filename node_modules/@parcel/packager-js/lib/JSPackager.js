"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _plugin = require("@parcel/plugin");

var _fs = _interopRequireDefault(require("fs"));

var _scopeHoisting = require("@parcel/scope-hoisting");

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _utils = require("@parcel/utils");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PRELUDE = _fs.default.readFileSync(_path.default.join(__dirname, 'prelude.js'), 'utf8').trim().replace(/;$/, '');

var _default = new _plugin.Packager({
  async package({
    bundle,
    bundleGraph,
    getInlineBundleContents,
    getSourceMapReference,
    options
  }) {
    function replaceReferences({
      contents,
      map
    }) {
      return (0, _utils.replaceInlineReferences)({
        bundle,
        bundleGraph,
        contents,
        getInlineReplacement: (dependency, inlineType, content) => ({
          from: `"${dependency.id}"`,
          to: inlineType === 'string' ? JSON.stringify(content) : content
        }),
        getInlineBundleContents,
        map
      });
    } // If scope hoisting is enabled, we use a different code path.


    if (bundle.env.scopeHoist) {
      let wrappedAssets = new Set();
      let {
        ast,
        referencedAssets
      } = (0, _scopeHoisting.link)({
        bundle,
        bundleGraph,
        ast: await (0, _scopeHoisting.concat)({
          bundle,
          bundleGraph,
          options,
          wrappedAssets
        }),
        options,
        wrappedAssets
      }); // Free up memory

      _traverse.default.cache.clear();

      let {
        contents,
        map
      } = (0, _scopeHoisting.generate)({
        bundleGraph,
        bundle,
        ast,
        referencedAssets,
        options
      });
      return replaceReferences({
        contents: contents + '\n' + (await getSourceMapSuffix(getSourceMapReference, map)),
        map
      });
    }

    if (bundle.env.outputFormat === 'esmodule') {
      throw new Error(`esmodule output is not supported without scope hoisting.`);
    } // For development, we just concatenate all of the code together
    // rather then enabling scope hoisting, which would be too slow.


    let queue = new _utils.PromiseQueue({
      maxConcurrent: 32
    });
    bundle.traverse(node => {
      if (node.type === 'asset') {
        queue.add(async () => {
          let [code, mapBuffer] = await Promise.all([node.value.getCode(), bundle.target.sourceMap && node.value.getMapBuffer()]);
          return {
            code,
            mapBuffer
          };
        });
      }
    });
    let results = await queue.run();
    let assets = '';
    let i = 0;
    let first = true;
    let map = new _sourceMap.default();
    let prefix = getPrefix(bundle, bundleGraph);
    let lineOffset = (0, _utils.countLines)(prefix);
    bundle.traverse(node => {
      let wrapped = first ? '' : ',';

      if (node.type === 'dependency') {
        let resolved = bundleGraph.getDependencyResolution(node.value, bundle);

        if (resolved && resolved.type !== 'js') {
          // if this is a reference to another javascript asset, we should not include
          // its output, as its contents should already be loaded.
          (0, _assert.default)(!bundle.hasAsset(resolved));
          wrapped += JSON.stringify(bundleGraph.getAssetPublicId(resolved)) + ':[function() {},{}]';
        } else {
          return;
        }
      }

      if (node.type === 'asset') {
        let asset = node.value;
        (0, _assert.default)(asset.type === 'js', 'all assets in a js bundle must be js assets');
        let deps = {};
        let dependencies = bundleGraph.getDependencies(asset);

        for (let dep of dependencies) {
          let resolved = bundleGraph.getDependencyResolution(dep, bundle);

          if (resolved) {
            deps[dep.moduleSpecifier] = bundleGraph.getAssetPublicId(resolved);
          }
        }

        let {
          code,
          mapBuffer
        } = results[i];
        let output = code || '';
        wrapped += JSON.stringify(bundleGraph.getAssetPublicId(asset)) + ':[function(require,module,exports) {\n' + output + '\n},';
        wrapped += JSON.stringify(deps);
        wrapped += ']';

        if (options.sourceMaps) {
          if (mapBuffer) {
            map.addBufferMappings(mapBuffer, lineOffset);
          } else {
            map.addEmptyMap(_path.default.relative(options.projectRoot, asset.filePath).replace(/\\+/g, '/'), output, lineOffset);
          }

          lineOffset += (0, _utils.countLines)(output) + 1;
        }

        i++;
      }

      assets += wrapped;
      first = false;
    });
    let entries = bundle.getEntryAssets();
    let mainEntry = bundle.getMainEntry();

    if (!isEntry(bundle, bundleGraph) && bundle.env.outputFormat === 'global') {
      // In async bundles we don't want the main entry to execute until we require it
      // as there might be dependencies in a sibling bundle that hasn't loaded yet.
      entries = entries.filter(a => {
        var _mainEntry;

        return a.id !== ((_mainEntry = mainEntry) === null || _mainEntry === void 0 ? void 0 : _mainEntry.id);
      });
      mainEntry = null;
    }

    return replaceReferences({
      contents: prefix + '({' + assets + '},{},' + JSON.stringify(entries.map(asset => bundleGraph.getAssetPublicId(asset))) + ', ' + JSON.stringify(mainEntry ? bundleGraph.getAssetPublicId(mainEntry) : null) + ', ' + 'null' + ')' + '\n\n' + (await getSourceMapSuffix(getSourceMapReference, map)),
      map
    });
  }

});

exports.default = _default;

function getPrefix(bundle, bundleGraph) {
  let interpreter;
  let mainEntry = bundle.getMainEntry();

  if (mainEntry && isEntry(bundle, bundleGraph) && !bundle.target.env.isBrowser()) {
    let _interpreter = mainEntry.meta.interpreter;
    (0, _assert.default)(_interpreter == null || typeof _interpreter === 'string');
    interpreter = _interpreter;
  }

  let importScripts = '';

  if (bundle.env.isWorker()) {
    let bundles = bundleGraph.getSiblingBundles(bundle);

    for (let b of bundles) {
      importScripts += `importScripts("${(0, _utils.relativeBundlePath)(bundle, b)}");\n`;
    }
  }

  return (// If the entry asset included a hashbang, repeat it at the top of the bundle
    (interpreter != null ? `#!${interpreter}\n` : '') + importScripts + PRELUDE
  );
}

function isEntry(bundle, bundleGraph) {
  var _bundle$getMainEntry;

  return !bundleGraph.hasParentBundleOfType(bundle, 'js') || bundle.env.isIsolated() || !!((_bundle$getMainEntry = bundle.getMainEntry()) === null || _bundle$getMainEntry === void 0 ? void 0 : _bundle$getMainEntry.isIsolated);
}

async function getSourceMapSuffix(getSourceMapReference, map) {
  let sourcemapReference = await getSourceMapReference(map);

  if (sourcemapReference != null) {
    return '//# sourceMappingURL=' + sourcemapReference + '\n';
  } else {
    return '';
  }
}