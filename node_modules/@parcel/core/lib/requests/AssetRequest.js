"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAssetRequest;

var _utils = require("@parcel/utils");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _ParcelConfigRequest = _interopRequireDefault(require("./ParcelConfigRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generateRequestId(type, obj) {
  return `${type}:${(0, _utils.md5FromObject)(obj)}`;
}

function createAssetRequest(input) {
  return {
    type: 'asset_request',
    id: getId(input),
    run,
    input
  };
}

const type = 'asset_request';

function getId(input) {
  // eslint-disable-next-line no-unused-vars
  let {
    optionsRef,
    ...hashInput
  } = input;
  return `${type}:${(0, _utils.md5FromObject)(hashInput)}`;
}

async function run({
  input,
  api,
  options,
  farm
}) {
  api.invalidateOnFileUpdate((await options.inputFS.realpath(input.filePath)));
  let start = Date.now();
  let {
    optionsRef,
    ...request
  } = input;
  let {
    cachePath
  } = (0, _nullthrows.default)((await api.runRequest((0, _ParcelConfigRequest.default)())));
  let {
    assets,
    configRequests
  } = await farm.createHandle('runTransform')({
    configCachePath: cachePath,
    optionsRef,
    request
  });
  let time = Date.now() - start;

  for (let asset of assets) {
    asset.stats.time = time;
  }

  for (let asset of assets) {
    for (let filePath of asset.includedFiles.keys()) {
      api.invalidateOnFileUpdate(filePath);
      api.invalidateOnFileDelete(filePath);
    }
  } // Add config requests


  for (let {
    request,
    result
  } of configRequests) {
    let id = generateRequestId('config_request', request);
    await api.runRequest({
      id,
      type: 'config_request',
      run: ({
        api
      }) => {
        let {
          includedFiles,
          watchGlob,
          shouldInvalidateOnStartup
        } = result;

        for (let filePath of includedFiles) {
          api.invalidateOnFileUpdate(filePath);
          api.invalidateOnFileDelete(filePath);
        }

        if (watchGlob != null) {
          api.invalidateOnFileCreate(watchGlob);
        }

        if (shouldInvalidateOnStartup) {
          api.invalidateOnStartup();
        }
      },
      input: null
    }); // Add dep version requests

    for (let [moduleSpecifier] of result.devDeps) {
      let depVersionRequst = {
        moduleSpecifier,
        resolveFrom: result.pkgFilePath != null ? result.pkgFilePath : result.searchPath
      };
      let id = generateRequestId('dep_version_request', depVersionRequst);
      await api.runRequest({
        id,
        type: 'version_request',
        run: ({
          api
        }) => {
          if (options.lockFile != null) {
            api.invalidateOnFileUpdate(options.lockFile);
          }
        },
        input: null
      });
    }
  }

  return assets;
}